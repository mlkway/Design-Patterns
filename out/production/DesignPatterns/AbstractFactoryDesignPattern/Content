Abstract Factory Design pattern is one of the Creational pattern. Abstract Factory pattern is almost similar to Factory Pattern
is Considered as another layer of abstraction over factory pattern.
Abstract Factory Patterns work around a super-factory which creates other factories.
Abstract Factory pattern implementation provides us with a framework that allows us to create objects that follow a general pattern.
So at runtime, the abstract factory is coupled with any desired concrete factory which can create objects of the desired type.
Let

        O - AbstractFactory: Declares an interface for operations that create abstract product objects.
        0 - ConcreteFactory: Implements the operations declared in the AbstractFactory to create Concrete product objects.
        0 - Product: Defines a product object to be created by the corresponding concrete factory and implements the abstractProduct interface
        0 - Client: Uses Only interfaces declared by AbstractFactory and AbstractProduct Classes.

        --------------------------------------------------------------------------------------------------------------------------------------------

        Abstract Factory Provides interfaces for creating families of related or dependent objects without specifying concrete class.
        Client Software creates a concrete implementation of the abstract factory and then uses the generic interfaces
        to create the concrete objects that are part of the family objects.
        The client does not know or care which concrete objects it gets from each of these concrete factories since iy uses only the generic interfaces of their products
        So with this idea of Abstract Factory pattern, we will now try to create a design that will facilitate the creation of related objects.

        ----------------------------------------------------------------------------------------------------------------------------------------------------

        Lets Take an example, Suppose we want to build a global car factory. if it was a factory design pattern, then it was suitable for a single location.
        but for this pattern, we need multiple locations and some critical design changes.
        We need car factories in each location like indiaCarFactory, USACarFactory, and DefaultCarFactory. Now, our application should be smart enough to identify the
        location where it is being used,
        so we should be able to use the appropiate car factory without even knowing which car factory implementation will be used internally.
        This also saves us from someone calling the wrong factory for a particular location.
        Here we need another layer of abstraction that will identify the location and internally use correct car factory implementation without even giving a single
        hint to the user. this is exactly the problem, which an abstract factory pattern is used to solve.
